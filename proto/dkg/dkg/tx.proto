syntax = "proto3";

package dkg.dkg;

import "dkg/dkg/share.proto";
import "dkg/dkg/commit.proto";
import "dkg/dkg/dispute.proto";
import "google/protobuf/any.proto";
import "gogoproto/gogo.proto";

// import "cosmos/base/v1beta1/coin.proto";
import "cosmos_proto/cosmos.proto";

// import "nexus/exported/v1beta1/types.proto";
option go_package = "dkg/x/dkg/types";

// Msg defines the Msg service.
service Msg {
  rpc RefundMsgRequest (MsgRefundMsgRequest) returns (MsgRefundMsgRequestResponse);
  rpc FileDispute      (MsgFileDispute     ) returns (MsgFileDisputeResponse     );
  rpc StartKeygen      (MsgStartKeygen     ) returns (MsgStartKeygenResponse     );
  rpc KeygenResult     (MsgKeygenResult    ) returns (MsgKeygenResultResponse    );
  rpc Timeout          (MsgTimeout         ) returns (MsgTimeoutResponse         );
}
message MsgRefundMsgRequest {
  string              creator       = 1;
  bytes               sender        = 2 [(gogoproto.casttype)             = "github.com/cosmos/cosmos-sdk/types.AccAddress"];
  google.protobuf.Any inner_message = 3 [(cosmos_proto.accepts_interface) = "Refundable"                                   ];
}

message MsgRefundMsgRequestResponse {}

message MsgFileDispute {
  string  creator     = 1;
  Dispute dispute     = 2;
  uint64  idOfAccuser = 3;
  string  keyId       = 4;
}

message MsgFileDisputeResponse {
  bool  verdict              = 1;
  bytes idOfSlashedValidator = 2;
}

message MsgStartKeygen {
  string creator      = 1;
  string keyID        = 2;
  string threshold    = 3;
  string timeout      = 4;
  string participants = 5;
}
message TrafficOut {
  string to_party_uid = 1;
  bytes payload = 2;
  bool is_broadcast = 3;
  string round_num = 4;
}

message MsgStartKeygenResponse {}

message MsgKeygenResult {
  string creator    = 1;
  string mpk        = 2;
  string commitment = 3;
}

message MsgKeygenResultResponse {}

message MsgTimeout {
  string creator = 1;
  string round   = 2;
  string id      = 3;
}

message MsgTimeoutResponse {}

