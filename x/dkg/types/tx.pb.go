// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: dkg/dkg/tx.proto

package types

import (
	context "context"
	fmt "fmt"
	_ "github.com/cosmos/cosmos-proto"
	_ "github.com/cosmos/cosmos-sdk/codec/types"
	github_com_cosmos_cosmos_sdk_types "github.com/cosmos/cosmos-sdk/types"
	_ "github.com/gogo/protobuf/gogoproto"
	grpc1 "github.com/gogo/protobuf/grpc"
	proto "github.com/gogo/protobuf/proto"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	io "io"
	math "math"
	math_bits "math/bits"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type ProcessKeygenTrafficRequest struct {
	Sender    github_com_cosmos_cosmos_sdk_types.AccAddress `protobuf:"bytes,1,opt,name=sender,proto3,casttype=github.com/cosmos/cosmos-sdk/types.AccAddress" json:"sender,omitempty"`
	SessionID string                                        `protobuf:"bytes,2,opt,name=session_id,json=sessionId,proto3" json:"session_id,omitempty"`
	Payload   *TrafficOut                                   `protobuf:"bytes,3,opt,name=payload,proto3" json:"payload,omitempty"`
}

func (m *ProcessKeygenTrafficRequest) Reset()         { *m = ProcessKeygenTrafficRequest{} }
func (m *ProcessKeygenTrafficRequest) String() string { return proto.CompactTextString(m) }
func (*ProcessKeygenTrafficRequest) ProtoMessage()    {}
func (*ProcessKeygenTrafficRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_1a4aecb3c66a91d8, []int{0}
}
func (m *ProcessKeygenTrafficRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *ProcessKeygenTrafficRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_ProcessKeygenTrafficRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *ProcessKeygenTrafficRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ProcessKeygenTrafficRequest.Merge(m, src)
}
func (m *ProcessKeygenTrafficRequest) XXX_Size() int {
	return m.Size()
}
func (m *ProcessKeygenTrafficRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ProcessKeygenTrafficRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ProcessKeygenTrafficRequest proto.InternalMessageInfo

func (m *ProcessKeygenTrafficRequest) GetSender() github_com_cosmos_cosmos_sdk_types.AccAddress {
	if m != nil {
		return m.Sender
	}
	return nil
}

func (m *ProcessKeygenTrafficRequest) GetSessionID() string {
	if m != nil {
		return m.SessionID
	}
	return ""
}

func (m *ProcessKeygenTrafficRequest) GetPayload() *TrafficOut {
	if m != nil {
		return m.Payload
	}
	return nil
}

type MsgRefundMsgRequestResponse struct {
}

func (m *MsgRefundMsgRequestResponse) Reset()         { *m = MsgRefundMsgRequestResponse{} }
func (m *MsgRefundMsgRequestResponse) String() string { return proto.CompactTextString(m) }
func (*MsgRefundMsgRequestResponse) ProtoMessage()    {}
func (*MsgRefundMsgRequestResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1a4aecb3c66a91d8, []int{1}
}
func (m *MsgRefundMsgRequestResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgRefundMsgRequestResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgRefundMsgRequestResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgRefundMsgRequestResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgRefundMsgRequestResponse.Merge(m, src)
}
func (m *MsgRefundMsgRequestResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgRefundMsgRequestResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgRefundMsgRequestResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgRefundMsgRequestResponse proto.InternalMessageInfo

type MsgFileDispute struct {
	Creator     string   `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Dispute     *Dispute `protobuf:"bytes,2,opt,name=dispute,proto3" json:"dispute,omitempty"`
	IdOfAccuser uint64   `protobuf:"varint,3,opt,name=idOfAccuser,proto3" json:"idOfAccuser,omitempty"`
	KeyId       string   `protobuf:"bytes,4,opt,name=keyId,proto3" json:"keyId,omitempty"`
}

func (m *MsgFileDispute) Reset()         { *m = MsgFileDispute{} }
func (m *MsgFileDispute) String() string { return proto.CompactTextString(m) }
func (*MsgFileDispute) ProtoMessage()    {}
func (*MsgFileDispute) Descriptor() ([]byte, []int) {
	return fileDescriptor_1a4aecb3c66a91d8, []int{2}
}
func (m *MsgFileDispute) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgFileDispute) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgFileDispute.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgFileDispute) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgFileDispute.Merge(m, src)
}
func (m *MsgFileDispute) XXX_Size() int {
	return m.Size()
}
func (m *MsgFileDispute) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgFileDispute.DiscardUnknown(m)
}

var xxx_messageInfo_MsgFileDispute proto.InternalMessageInfo

func (m *MsgFileDispute) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgFileDispute) GetDispute() *Dispute {
	if m != nil {
		return m.Dispute
	}
	return nil
}

func (m *MsgFileDispute) GetIdOfAccuser() uint64 {
	if m != nil {
		return m.IdOfAccuser
	}
	return 0
}

func (m *MsgFileDispute) GetKeyId() string {
	if m != nil {
		return m.KeyId
	}
	return ""
}

type MsgFileDisputeResponse struct {
	Verdict              bool   `protobuf:"varint,1,opt,name=verdict,proto3" json:"verdict,omitempty"`
	IdOfSlashedValidator []byte `protobuf:"bytes,2,opt,name=idOfSlashedValidator,proto3" json:"idOfSlashedValidator,omitempty"`
}

func (m *MsgFileDisputeResponse) Reset()         { *m = MsgFileDisputeResponse{} }
func (m *MsgFileDisputeResponse) String() string { return proto.CompactTextString(m) }
func (*MsgFileDisputeResponse) ProtoMessage()    {}
func (*MsgFileDisputeResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1a4aecb3c66a91d8, []int{3}
}
func (m *MsgFileDisputeResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgFileDisputeResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgFileDisputeResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgFileDisputeResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgFileDisputeResponse.Merge(m, src)
}
func (m *MsgFileDisputeResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgFileDisputeResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgFileDisputeResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgFileDisputeResponse proto.InternalMessageInfo

func (m *MsgFileDisputeResponse) GetVerdict() bool {
	if m != nil {
		return m.Verdict
	}
	return false
}

func (m *MsgFileDisputeResponse) GetIdOfSlashedValidator() []byte {
	if m != nil {
		return m.IdOfSlashedValidator
	}
	return nil
}

type MsgStartKeygen struct {
	Creator      string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	KeyID        string `protobuf:"bytes,2,opt,name=keyID,proto3" json:"keyID,omitempty"`
	Threshold    string `protobuf:"bytes,3,opt,name=threshold,proto3" json:"threshold,omitempty"`
	Timeout      string `protobuf:"bytes,4,opt,name=timeout,proto3" json:"timeout,omitempty"`
	Participants string `protobuf:"bytes,5,opt,name=participants,proto3" json:"participants,omitempty"`
}

func (m *MsgStartKeygen) Reset()         { *m = MsgStartKeygen{} }
func (m *MsgStartKeygen) String() string { return proto.CompactTextString(m) }
func (*MsgStartKeygen) ProtoMessage()    {}
func (*MsgStartKeygen) Descriptor() ([]byte, []int) {
	return fileDescriptor_1a4aecb3c66a91d8, []int{4}
}
func (m *MsgStartKeygen) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgStartKeygen) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgStartKeygen.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgStartKeygen) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgStartKeygen.Merge(m, src)
}
func (m *MsgStartKeygen) XXX_Size() int {
	return m.Size()
}
func (m *MsgStartKeygen) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgStartKeygen.DiscardUnknown(m)
}

var xxx_messageInfo_MsgStartKeygen proto.InternalMessageInfo

func (m *MsgStartKeygen) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgStartKeygen) GetKeyID() string {
	if m != nil {
		return m.KeyID
	}
	return ""
}

func (m *MsgStartKeygen) GetThreshold() string {
	if m != nil {
		return m.Threshold
	}
	return ""
}

func (m *MsgStartKeygen) GetTimeout() string {
	if m != nil {
		return m.Timeout
	}
	return ""
}

func (m *MsgStartKeygen) GetParticipants() string {
	if m != nil {
		return m.Participants
	}
	return ""
}

type TrafficOut struct {
	ToPartyUid  string `protobuf:"bytes,1,opt,name=to_party_uid,json=toPartyUid,proto3" json:"to_party_uid,omitempty"`
	Payload     []byte `protobuf:"bytes,2,opt,name=payload,proto3" json:"payload,omitempty"`
	IsBroadcast bool   `protobuf:"varint,3,opt,name=is_broadcast,json=isBroadcast,proto3" json:"is_broadcast,omitempty"`
	RoundNum    string `protobuf:"bytes,4,opt,name=round_num,json=roundNum,proto3" json:"round_num,omitempty"`
}

func (m *TrafficOut) Reset()         { *m = TrafficOut{} }
func (m *TrafficOut) String() string { return proto.CompactTextString(m) }
func (*TrafficOut) ProtoMessage()    {}
func (*TrafficOut) Descriptor() ([]byte, []int) {
	return fileDescriptor_1a4aecb3c66a91d8, []int{5}
}
func (m *TrafficOut) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *TrafficOut) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_TrafficOut.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *TrafficOut) XXX_Merge(src proto.Message) {
	xxx_messageInfo_TrafficOut.Merge(m, src)
}
func (m *TrafficOut) XXX_Size() int {
	return m.Size()
}
func (m *TrafficOut) XXX_DiscardUnknown() {
	xxx_messageInfo_TrafficOut.DiscardUnknown(m)
}

var xxx_messageInfo_TrafficOut proto.InternalMessageInfo

func (m *TrafficOut) GetToPartyUid() string {
	if m != nil {
		return m.ToPartyUid
	}
	return ""
}

func (m *TrafficOut) GetPayload() []byte {
	if m != nil {
		return m.Payload
	}
	return nil
}

func (m *TrafficOut) GetIsBroadcast() bool {
	if m != nil {
		return m.IsBroadcast
	}
	return false
}

func (m *TrafficOut) GetRoundNum() string {
	if m != nil {
		return m.RoundNum
	}
	return ""
}

type MsgStartKeygenResponse struct {
}

func (m *MsgStartKeygenResponse) Reset()         { *m = MsgStartKeygenResponse{} }
func (m *MsgStartKeygenResponse) String() string { return proto.CompactTextString(m) }
func (*MsgStartKeygenResponse) ProtoMessage()    {}
func (*MsgStartKeygenResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1a4aecb3c66a91d8, []int{6}
}
func (m *MsgStartKeygenResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgStartKeygenResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgStartKeygenResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgStartKeygenResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgStartKeygenResponse.Merge(m, src)
}
func (m *MsgStartKeygenResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgStartKeygenResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgStartKeygenResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgStartKeygenResponse proto.InternalMessageInfo

type MsgKeygenResult struct {
	Creator    string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Mpk        string `protobuf:"bytes,2,opt,name=mpk,proto3" json:"mpk,omitempty"`
	Commitment string `protobuf:"bytes,3,opt,name=commitment,proto3" json:"commitment,omitempty"`
}

func (m *MsgKeygenResult) Reset()         { *m = MsgKeygenResult{} }
func (m *MsgKeygenResult) String() string { return proto.CompactTextString(m) }
func (*MsgKeygenResult) ProtoMessage()    {}
func (*MsgKeygenResult) Descriptor() ([]byte, []int) {
	return fileDescriptor_1a4aecb3c66a91d8, []int{7}
}
func (m *MsgKeygenResult) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgKeygenResult) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgKeygenResult.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgKeygenResult) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgKeygenResult.Merge(m, src)
}
func (m *MsgKeygenResult) XXX_Size() int {
	return m.Size()
}
func (m *MsgKeygenResult) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgKeygenResult.DiscardUnknown(m)
}

var xxx_messageInfo_MsgKeygenResult proto.InternalMessageInfo

func (m *MsgKeygenResult) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgKeygenResult) GetMpk() string {
	if m != nil {
		return m.Mpk
	}
	return ""
}

func (m *MsgKeygenResult) GetCommitment() string {
	if m != nil {
		return m.Commitment
	}
	return ""
}

type MsgKeygenResultResponse struct {
}

func (m *MsgKeygenResultResponse) Reset()         { *m = MsgKeygenResultResponse{} }
func (m *MsgKeygenResultResponse) String() string { return proto.CompactTextString(m) }
func (*MsgKeygenResultResponse) ProtoMessage()    {}
func (*MsgKeygenResultResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1a4aecb3c66a91d8, []int{8}
}
func (m *MsgKeygenResultResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgKeygenResultResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgKeygenResultResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgKeygenResultResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgKeygenResultResponse.Merge(m, src)
}
func (m *MsgKeygenResultResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgKeygenResultResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgKeygenResultResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgKeygenResultResponse proto.InternalMessageInfo

type MsgTimeout struct {
	Creator string `protobuf:"bytes,1,opt,name=creator,proto3" json:"creator,omitempty"`
	Round   string `protobuf:"bytes,2,opt,name=round,proto3" json:"round,omitempty"`
	Id      string `protobuf:"bytes,3,opt,name=id,proto3" json:"id,omitempty"`
}

func (m *MsgTimeout) Reset()         { *m = MsgTimeout{} }
func (m *MsgTimeout) String() string { return proto.CompactTextString(m) }
func (*MsgTimeout) ProtoMessage()    {}
func (*MsgTimeout) Descriptor() ([]byte, []int) {
	return fileDescriptor_1a4aecb3c66a91d8, []int{9}
}
func (m *MsgTimeout) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTimeout) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTimeout.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTimeout) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTimeout.Merge(m, src)
}
func (m *MsgTimeout) XXX_Size() int {
	return m.Size()
}
func (m *MsgTimeout) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTimeout.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTimeout proto.InternalMessageInfo

func (m *MsgTimeout) GetCreator() string {
	if m != nil {
		return m.Creator
	}
	return ""
}

func (m *MsgTimeout) GetRound() string {
	if m != nil {
		return m.Round
	}
	return ""
}

func (m *MsgTimeout) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

type MsgTimeoutResponse struct {
}

func (m *MsgTimeoutResponse) Reset()         { *m = MsgTimeoutResponse{} }
func (m *MsgTimeoutResponse) String() string { return proto.CompactTextString(m) }
func (*MsgTimeoutResponse) ProtoMessage()    {}
func (*MsgTimeoutResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_1a4aecb3c66a91d8, []int{10}
}
func (m *MsgTimeoutResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *MsgTimeoutResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_MsgTimeoutResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *MsgTimeoutResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_MsgTimeoutResponse.Merge(m, src)
}
func (m *MsgTimeoutResponse) XXX_Size() int {
	return m.Size()
}
func (m *MsgTimeoutResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_MsgTimeoutResponse.DiscardUnknown(m)
}

var xxx_messageInfo_MsgTimeoutResponse proto.InternalMessageInfo

func init() {
	proto.RegisterType((*ProcessKeygenTrafficRequest)(nil), "dkg.dkg.ProcessKeygenTrafficRequest")
	proto.RegisterType((*MsgRefundMsgRequestResponse)(nil), "dkg.dkg.MsgRefundMsgRequestResponse")
	proto.RegisterType((*MsgFileDispute)(nil), "dkg.dkg.MsgFileDispute")
	proto.RegisterType((*MsgFileDisputeResponse)(nil), "dkg.dkg.MsgFileDisputeResponse")
	proto.RegisterType((*MsgStartKeygen)(nil), "dkg.dkg.MsgStartKeygen")
	proto.RegisterType((*TrafficOut)(nil), "dkg.dkg.TrafficOut")
	proto.RegisterType((*MsgStartKeygenResponse)(nil), "dkg.dkg.MsgStartKeygenResponse")
	proto.RegisterType((*MsgKeygenResult)(nil), "dkg.dkg.MsgKeygenResult")
	proto.RegisterType((*MsgKeygenResultResponse)(nil), "dkg.dkg.MsgKeygenResultResponse")
	proto.RegisterType((*MsgTimeout)(nil), "dkg.dkg.MsgTimeout")
	proto.RegisterType((*MsgTimeoutResponse)(nil), "dkg.dkg.MsgTimeoutResponse")
}

func init() { proto.RegisterFile("dkg/dkg/tx.proto", fileDescriptor_1a4aecb3c66a91d8) }

var fileDescriptor_1a4aecb3c66a91d8 = []byte{
	// 770 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x55, 0xcd, 0x6e, 0xea, 0x46,
	0x14, 0x8e, 0xc9, 0x0f, 0xe1, 0x40, 0x13, 0x34, 0xa1, 0x0d, 0x81, 0x94, 0x50, 0xab, 0x8b, 0xb4,
	0x6a, 0x40, 0xa5, 0xcb, 0xae, 0x82, 0x50, 0x2b, 0xda, 0xd2, 0x44, 0x4e, 0x9a, 0x45, 0xa5, 0x0a,
	0x19, 0xcf, 0x60, 0x46, 0x60, 0x8f, 0xeb, 0x19, 0x57, 0xe1, 0x0d, 0xba, 0xaa, 0xfa, 0x00, 0x7d,
	0x9d, 0x4a, 0x5d, 0x66, 0xd9, 0x55, 0x74, 0x45, 0x5e, 0xe2, 0xea, 0xae, 0xae, 0x3c, 0x3f, 0xc4,
	0xe4, 0x12, 0x16, 0x51, 0xe6, 0x7c, 0xdf, 0x9c, 0x33, 0xdf, 0x39, 0xdf, 0x8c, 0x81, 0x32, 0x9e,
	0xfa, 0xed, 0xf4, 0x4f, 0xdc, 0xb7, 0xa2, 0x98, 0x09, 0x86, 0xf2, 0x78, 0xea, 0xb7, 0xf0, 0xd4,
	0xaf, 0x1d, 0x19, 0x8a, 0x4f, 0xdc, 0x98, 0x28, 0xb6, 0x56, 0x31, 0xa0, 0xc7, 0x82, 0x80, 0x0a,
	0x8d, 0x7e, 0x6c, 0x50, 0x4c, 0x79, 0x94, 0x88, 0x0f, 0x36, 0xc7, 0x64, 0x9c, 0x84, 0x58, 0xa3,
	0x27, 0x3e, 0x63, 0xfe, 0x8c, 0xb4, 0x65, 0x34, 0x4a, 0xc6, 0x6d, 0x37, 0x9c, 0x9b, 0x04, 0x9f,
	0xf9, 0x4c, 0x2e, 0xdb, 0xe9, 0xca, 0x24, 0x78, 0x8c, 0x07, 0x8c, 0x0f, 0x15, 0xa1, 0x02, 0x45,
	0xd9, 0xff, 0x5a, 0x50, 0xbf, 0x8e, 0x99, 0x47, 0x38, 0xff, 0x91, 0xcc, 0x7d, 0x12, 0xde, 0xc6,
	0xee, 0x78, 0x4c, 0x3d, 0x87, 0xfc, 0x9e, 0x10, 0x2e, 0x50, 0x1f, 0xf6, 0x38, 0x09, 0x31, 0x89,
	0xab, 0x56, 0xd3, 0x3a, 0x2f, 0x75, 0xbf, 0x7e, 0xf7, 0x78, 0x76, 0xe1, 0x53, 0x31, 0x49, 0x46,
	0x2d, 0x8f, 0x05, 0xba, 0x98, 0xfe, 0x77, 0xc1, 0xf1, 0xb4, 0x2d, 0xe6, 0x11, 0xe1, 0xad, 0x4b,
	0xcf, 0xbb, 0xc4, 0x38, 0x26, 0x9c, 0x3b, 0xba, 0x00, 0xfa, 0x0a, 0x80, 0x13, 0xce, 0x29, 0x0b,
	0x87, 0x14, 0x57, 0x73, 0x4d, 0xeb, 0xbc, 0xd0, 0xfd, 0x68, 0xf1, 0x78, 0x56, 0xb8, 0x51, 0x68,
	0xbf, 0xe7, 0x14, 0xf4, 0x86, 0x3e, 0x46, 0x17, 0x90, 0x8f, 0xdc, 0xf9, 0x8c, 0xb9, 0xb8, 0xba,
	0xdd, 0xb4, 0xce, 0x8b, 0x9d, 0xa3, 0x96, 0x9e, 0x6b, 0x4b, 0x4b, 0xbc, 0x4a, 0x84, 0x63, 0xf6,
	0xd8, 0x9f, 0x42, 0x7d, 0xc0, 0x7d, 0x47, 0x8e, 0x49, 0x2e, 0xa4, 0x7c, 0x87, 0xf0, 0x88, 0x85,
	0x9c, 0xd8, 0x7f, 0x59, 0x70, 0x30, 0xe0, 0xfe, 0x77, 0x74, 0x46, 0x7a, 0x6a, 0xc2, 0xa8, 0x0a,
	0x79, 0x2f, 0x26, 0xae, 0x60, 0xaa, 0xb5, 0x82, 0x63, 0x42, 0xf4, 0x25, 0xe4, 0xb5, 0x0d, 0x52,
	0x65, 0xb1, 0x53, 0x5e, 0x1e, 0xad, 0x93, 0x1d, 0xb3, 0x01, 0x35, 0xa1, 0x48, 0xf1, 0xd5, 0xf8,
	0xd2, 0xf3, 0x12, 0x4e, 0x62, 0x29, 0x75, 0xc7, 0xc9, 0x42, 0xa8, 0x02, 0xbb, 0x53, 0x32, 0xef,
	0xe3, 0xea, 0x8e, 0x3c, 0x45, 0x05, 0xf6, 0x18, 0x3e, 0x59, 0xd5, 0x63, 0xa4, 0xa6, 0xba, 0xfe,
	0x20, 0x31, 0xa6, 0x9e, 0x90, 0xba, 0xf6, 0x1d, 0x13, 0xa2, 0x0e, 0x54, 0xd2, 0xc2, 0x37, 0x33,
	0x97, 0x4f, 0x08, 0xbe, 0x73, 0x67, 0x14, 0x4b, 0xf9, 0xa9, 0xc8, 0x92, 0xb3, 0x96, 0xb3, 0xff,
	0x51, 0x8d, 0xdf, 0x08, 0x37, 0x16, 0xca, 0xe0, 0x0d, 0x8d, 0x6b, 0xa9, 0x3d, 0x65, 0x8e, 0x92,
	0xda, 0x43, 0xa7, 0x50, 0x10, 0x93, 0x98, 0xf0, 0x09, 0x9b, 0x29, 0x2f, 0x0a, 0xce, 0x33, 0x90,
	0x56, 0x13, 0x34, 0x20, 0x2c, 0x11, 0xba, 0x41, 0x13, 0x22, 0x1b, 0x4a, 0x91, 0x1b, 0x0b, 0xea,
	0xd1, 0xc8, 0x0d, 0x05, 0xaf, 0xee, 0x4a, 0x7a, 0x05, 0xb3, 0xff, 0xb4, 0x00, 0x9e, 0xed, 0x44,
	0x4d, 0x28, 0x09, 0x36, 0x4c, 0x77, 0xcc, 0x87, 0x09, 0xc5, 0x5a, 0x1f, 0x08, 0x76, 0x9d, 0x42,
	0xbf, 0x50, 0x79, 0x9c, 0xb9, 0x16, 0xaa, 0x6d, 0x13, 0xa2, 0xcf, 0xa0, 0x44, 0xf9, 0x70, 0x14,
	0x33, 0x17, 0x7b, 0x2e, 0x17, 0x52, 0xe9, 0xbe, 0x53, 0xa4, 0xbc, 0x6b, 0x20, 0x54, 0x87, 0x42,
	0xcc, 0x92, 0x10, 0x0f, 0xc3, 0x24, 0xd0, 0x6a, 0xf7, 0x25, 0xf0, 0x73, 0x12, 0xd8, 0x55, 0xe9,
	0x48, 0x66, 0x50, 0xcb, 0xcb, 0xf3, 0x1b, 0x1c, 0x0e, 0xb8, 0xbf, 0x04, 0x93, 0x99, 0xd8, 0x30,
	0xc3, 0x32, 0x6c, 0x07, 0xd1, 0x54, 0x4f, 0x30, 0x5d, 0xa2, 0x06, 0x80, 0x7a, 0xeb, 0x01, 0x09,
	0x85, 0x1e, 0x60, 0x06, 0xb1, 0x4f, 0xe0, 0xf8, 0x45, 0xf9, 0xe5, 0xc9, 0x3f, 0x01, 0x0c, 0xb8,
	0x7f, 0xab, 0x07, 0xba, 0xd1, 0x38, 0xd9, 0x87, 0x31, 0x4e, 0x06, 0xe8, 0x00, 0x72, 0xd4, 0x38,
	0x96, 0xa3, 0xd8, 0xae, 0x00, 0x7a, 0xae, 0x66, 0xce, 0xe8, 0xbc, 0xcd, 0xc1, 0xf6, 0x80, 0xfb,
	0xe8, 0x0e, 0xca, 0x2f, 0x9f, 0x0f, 0x3a, 0x5d, 0x5e, 0xfc, 0x35, 0x8f, 0xab, 0xf6, 0xf9, 0x26,
	0x76, 0x79, 0x9f, 0xbf, 0x87, 0x62, 0xf6, 0xd9, 0x1d, 0x67, 0x93, 0x32, 0x44, 0xed, 0xec, 0x15,
	0x22, 0x5b, 0x28, 0x7b, 0x8d, 0x57, 0x0a, 0x65, 0x88, 0xd5, 0x42, 0x6b, 0xfc, 0x44, 0x3f, 0x40,
	0x69, 0xd5, 0xcc, 0x6c, 0x42, 0x96, 0xa9, 0x35, 0x5f, 0x63, 0x96, 0xb5, 0xbe, 0x85, 0xbc, 0xb1,
	0xe7, 0x28, 0xbb, 0x59, 0x83, 0xb5, 0xfa, 0x1a, 0xd0, 0x24, 0x77, 0xbf, 0xf8, 0x6f, 0xd1, 0xb0,
	0x1e, 0x16, 0x0d, 0xeb, 0xcd, 0xa2, 0x61, 0xfd, 0xfd, 0xd4, 0xd8, 0x7a, 0x78, 0x6a, 0x6c, 0xfd,
	0xff, 0xd4, 0xd8, 0xfa, 0xf5, 0x30, 0xfd, 0xe8, 0xdf, 0xab, 0xdf, 0x95, 0xf4, 0x7b, 0x3a, 0xda,
	0x93, 0x9f, 0xeb, 0x6f, 0xde, 0x07, 0x00, 0x00, 0xff, 0xff, 0xf9, 0x1a, 0x6f, 0x08, 0x6f, 0x06,
	0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// MsgClient is the client API for Msg service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type MsgClient interface {
	RefundMsgRequest(ctx context.Context, in *MsgRefundMsgRequest, opts ...grpc.CallOption) (*MsgRefundMsgRequestResponse, error)
	FileDispute(ctx context.Context, in *MsgFileDispute, opts ...grpc.CallOption) (*MsgFileDisputeResponse, error)
	StartKeygen(ctx context.Context, in *MsgStartKeygen, opts ...grpc.CallOption) (*MsgStartKeygenResponse, error)
	KeygenResult(ctx context.Context, in *MsgKeygenResult, opts ...grpc.CallOption) (*MsgKeygenResultResponse, error)
	Timeout(ctx context.Context, in *MsgTimeout, opts ...grpc.CallOption) (*MsgTimeoutResponse, error)
}

type msgClient struct {
	cc grpc1.ClientConn
}

func NewMsgClient(cc grpc1.ClientConn) MsgClient {
	return &msgClient{cc}
}

func (c *msgClient) RefundMsgRequest(ctx context.Context, in *MsgRefundMsgRequest, opts ...grpc.CallOption) (*MsgRefundMsgRequestResponse, error) {
	out := new(MsgRefundMsgRequestResponse)
	err := c.cc.Invoke(ctx, "/dkg.dkg.Msg/RefundMsgRequest", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) FileDispute(ctx context.Context, in *MsgFileDispute, opts ...grpc.CallOption) (*MsgFileDisputeResponse, error) {
	out := new(MsgFileDisputeResponse)
	err := c.cc.Invoke(ctx, "/dkg.dkg.Msg/FileDispute", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) StartKeygen(ctx context.Context, in *MsgStartKeygen, opts ...grpc.CallOption) (*MsgStartKeygenResponse, error) {
	out := new(MsgStartKeygenResponse)
	err := c.cc.Invoke(ctx, "/dkg.dkg.Msg/StartKeygen", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) KeygenResult(ctx context.Context, in *MsgKeygenResult, opts ...grpc.CallOption) (*MsgKeygenResultResponse, error) {
	out := new(MsgKeygenResultResponse)
	err := c.cc.Invoke(ctx, "/dkg.dkg.Msg/KeygenResult", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *msgClient) Timeout(ctx context.Context, in *MsgTimeout, opts ...grpc.CallOption) (*MsgTimeoutResponse, error) {
	out := new(MsgTimeoutResponse)
	err := c.cc.Invoke(ctx, "/dkg.dkg.Msg/Timeout", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MsgServer is the server API for Msg service.
type MsgServer interface {
	RefundMsgRequest(context.Context, *MsgRefundMsgRequest) (*MsgRefundMsgRequestResponse, error)
	FileDispute(context.Context, *MsgFileDispute) (*MsgFileDisputeResponse, error)
	StartKeygen(context.Context, *MsgStartKeygen) (*MsgStartKeygenResponse, error)
	KeygenResult(context.Context, *MsgKeygenResult) (*MsgKeygenResultResponse, error)
	Timeout(context.Context, *MsgTimeout) (*MsgTimeoutResponse, error)
}

// UnimplementedMsgServer can be embedded to have forward compatible implementations.
type UnimplementedMsgServer struct {
}

func (*UnimplementedMsgServer) RefundMsgRequest(ctx context.Context, req *MsgRefundMsgRequest) (*MsgRefundMsgRequestResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RefundMsgRequest not implemented")
}
func (*UnimplementedMsgServer) FileDispute(ctx context.Context, req *MsgFileDispute) (*MsgFileDisputeResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FileDispute not implemented")
}
func (*UnimplementedMsgServer) StartKeygen(ctx context.Context, req *MsgStartKeygen) (*MsgStartKeygenResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method StartKeygen not implemented")
}
func (*UnimplementedMsgServer) KeygenResult(ctx context.Context, req *MsgKeygenResult) (*MsgKeygenResultResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method KeygenResult not implemented")
}
func (*UnimplementedMsgServer) Timeout(ctx context.Context, req *MsgTimeout) (*MsgTimeoutResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Timeout not implemented")
}

func RegisterMsgServer(s grpc1.Server, srv MsgServer) {
	s.RegisterService(&_Msg_serviceDesc, srv)
}

func _Msg_RefundMsgRequest_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgRefundMsgRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).RefundMsgRequest(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dkg.dkg.Msg/RefundMsgRequest",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).RefundMsgRequest(ctx, req.(*MsgRefundMsgRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_FileDispute_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgFileDispute)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).FileDispute(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dkg.dkg.Msg/FileDispute",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).FileDispute(ctx, req.(*MsgFileDispute))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_StartKeygen_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgStartKeygen)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).StartKeygen(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dkg.dkg.Msg/StartKeygen",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).StartKeygen(ctx, req.(*MsgStartKeygen))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_KeygenResult_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgKeygenResult)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).KeygenResult(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dkg.dkg.Msg/KeygenResult",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).KeygenResult(ctx, req.(*MsgKeygenResult))
	}
	return interceptor(ctx, in, info, handler)
}

func _Msg_Timeout_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(MsgTimeout)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MsgServer).Timeout(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/dkg.dkg.Msg/Timeout",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MsgServer).Timeout(ctx, req.(*MsgTimeout))
	}
	return interceptor(ctx, in, info, handler)
}

var _Msg_serviceDesc = grpc.ServiceDesc{
	ServiceName: "dkg.dkg.Msg",
	HandlerType: (*MsgServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RefundMsgRequest",
			Handler:    _Msg_RefundMsgRequest_Handler,
		},
		{
			MethodName: "FileDispute",
			Handler:    _Msg_FileDispute_Handler,
		},
		{
			MethodName: "StartKeygen",
			Handler:    _Msg_StartKeygen_Handler,
		},
		{
			MethodName: "KeygenResult",
			Handler:    _Msg_KeygenResult_Handler,
		},
		{
			MethodName: "Timeout",
			Handler:    _Msg_Timeout_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dkg/dkg/tx.proto",
}

func (m *ProcessKeygenTrafficRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *ProcessKeygenTrafficRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *ProcessKeygenTrafficRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Payload != nil {
		{
			size, err := m.Payload.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x1a
	}
	if len(m.SessionID) > 0 {
		i -= len(m.SessionID)
		copy(dAtA[i:], m.SessionID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.SessionID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Sender) > 0 {
		i -= len(m.Sender)
		copy(dAtA[i:], m.Sender)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Sender)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgRefundMsgRequestResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgRefundMsgRequestResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgRefundMsgRequestResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgFileDispute) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgFileDispute) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFileDispute) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.KeyId) > 0 {
		i -= len(m.KeyId)
		copy(dAtA[i:], m.KeyId)
		i = encodeVarintTx(dAtA, i, uint64(len(m.KeyId)))
		i--
		dAtA[i] = 0x22
	}
	if m.IdOfAccuser != 0 {
		i = encodeVarintTx(dAtA, i, uint64(m.IdOfAccuser))
		i--
		dAtA[i] = 0x18
	}
	if m.Dispute != nil {
		{
			size, err := m.Dispute.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintTx(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgFileDisputeResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgFileDisputeResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgFileDisputeResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.IdOfSlashedValidator) > 0 {
		i -= len(m.IdOfSlashedValidator)
		copy(dAtA[i:], m.IdOfSlashedValidator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.IdOfSlashedValidator)))
		i--
		dAtA[i] = 0x12
	}
	if m.Verdict {
		i--
		if m.Verdict {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *MsgStartKeygen) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgStartKeygen) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgStartKeygen) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Participants) > 0 {
		i -= len(m.Participants)
		copy(dAtA[i:], m.Participants)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Participants)))
		i--
		dAtA[i] = 0x2a
	}
	if len(m.Timeout) > 0 {
		i -= len(m.Timeout)
		copy(dAtA[i:], m.Timeout)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Timeout)))
		i--
		dAtA[i] = 0x22
	}
	if len(m.Threshold) > 0 {
		i -= len(m.Threshold)
		copy(dAtA[i:], m.Threshold)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Threshold)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.KeyID) > 0 {
		i -= len(m.KeyID)
		copy(dAtA[i:], m.KeyID)
		i = encodeVarintTx(dAtA, i, uint64(len(m.KeyID)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *TrafficOut) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *TrafficOut) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *TrafficOut) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.RoundNum) > 0 {
		i -= len(m.RoundNum)
		copy(dAtA[i:], m.RoundNum)
		i = encodeVarintTx(dAtA, i, uint64(len(m.RoundNum)))
		i--
		dAtA[i] = 0x22
	}
	if m.IsBroadcast {
		i--
		if m.IsBroadcast {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x18
	}
	if len(m.Payload) > 0 {
		i -= len(m.Payload)
		copy(dAtA[i:], m.Payload)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Payload)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.ToPartyUid) > 0 {
		i -= len(m.ToPartyUid)
		copy(dAtA[i:], m.ToPartyUid)
		i = encodeVarintTx(dAtA, i, uint64(len(m.ToPartyUid)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgStartKeygenResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgStartKeygenResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgStartKeygenResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgKeygenResult) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgKeygenResult) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgKeygenResult) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Commitment) > 0 {
		i -= len(m.Commitment)
		copy(dAtA[i:], m.Commitment)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Commitment)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Mpk) > 0 {
		i -= len(m.Mpk)
		copy(dAtA[i:], m.Mpk)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Mpk)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgKeygenResultResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgKeygenResultResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgKeygenResultResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *MsgTimeout) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTimeout) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTimeout) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if len(m.Id) > 0 {
		i -= len(m.Id)
		copy(dAtA[i:], m.Id)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Id)))
		i--
		dAtA[i] = 0x1a
	}
	if len(m.Round) > 0 {
		i -= len(m.Round)
		copy(dAtA[i:], m.Round)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Round)))
		i--
		dAtA[i] = 0x12
	}
	if len(m.Creator) > 0 {
		i -= len(m.Creator)
		copy(dAtA[i:], m.Creator)
		i = encodeVarintTx(dAtA, i, uint64(len(m.Creator)))
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *MsgTimeoutResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *MsgTimeoutResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *MsgTimeoutResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func encodeVarintTx(dAtA []byte, offset int, v uint64) int {
	offset -= sovTx(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *ProcessKeygenTrafficRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Sender)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.SessionID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Payload != nil {
		l = m.Payload.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgRefundMsgRequestResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgFileDispute) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.Dispute != nil {
		l = m.Dispute.Size()
		n += 1 + l + sovTx(uint64(l))
	}
	if m.IdOfAccuser != 0 {
		n += 1 + sovTx(uint64(m.IdOfAccuser))
	}
	l = len(m.KeyId)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgFileDisputeResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Verdict {
		n += 2
	}
	l = len(m.IdOfSlashedValidator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgStartKeygen) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.KeyID)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Threshold)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Timeout)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Participants)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *TrafficOut) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.ToPartyUid)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Payload)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	if m.IsBroadcast {
		n += 2
	}
	l = len(m.RoundNum)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgStartKeygenResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgKeygenResult) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Mpk)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Commitment)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgKeygenResultResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *MsgTimeout) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	l = len(m.Creator)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Round)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	l = len(m.Id)
	if l > 0 {
		n += 1 + l + sovTx(uint64(l))
	}
	return n
}

func (m *MsgTimeoutResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func sovTx(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozTx(x uint64) (n int) {
	return sovTx(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (m *ProcessKeygenTrafficRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: ProcessKeygenTrafficRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: ProcessKeygenTrafficRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Sender", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Sender = append(m.Sender[:0], dAtA[iNdEx:postIndex]...)
			if m.Sender == nil {
				m.Sender = []byte{}
			}
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field SessionID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.SessionID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Payload == nil {
				m.Payload = &TrafficOut{}
			}
			if err := m.Payload.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgRefundMsgRequestResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgRefundMsgRequestResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgRefundMsgRequestResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgFileDispute) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgFileDispute: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgFileDispute: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Dispute", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Dispute == nil {
				m.Dispute = &Dispute{}
			}
			if err := m.Dispute.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdOfAccuser", wireType)
			}
			m.IdOfAccuser = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.IdOfAccuser |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyId", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyId = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgFileDisputeResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgFileDisputeResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgFileDisputeResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Verdict", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.Verdict = bool(v != 0)
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field IdOfSlashedValidator", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.IdOfSlashedValidator = append(m.IdOfSlashedValidator[:0], dAtA[iNdEx:postIndex]...)
			if m.IdOfSlashedValidator == nil {
				m.IdOfSlashedValidator = []byte{}
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgStartKeygen) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgStartKeygen: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgStartKeygen: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field KeyID", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.KeyID = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Threshold", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Threshold = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Timeout", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Timeout = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 5:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Participants", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Participants = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *TrafficOut) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: TrafficOut: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: TrafficOut: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field ToPartyUid", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.ToPartyUid = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Payload", wireType)
			}
			var byteLen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				byteLen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if byteLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + byteLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Payload = append(m.Payload[:0], dAtA[iNdEx:postIndex]...)
			if m.Payload == nil {
				m.Payload = []byte{}
			}
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field IsBroadcast", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.IsBroadcast = bool(v != 0)
		case 4:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field RoundNum", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.RoundNum = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgStartKeygenResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgStartKeygenResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgStartKeygenResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgKeygenResult) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgKeygenResult: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgKeygenResult: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Mpk", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Mpk = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Commitment", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Commitment = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgKeygenResultResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgKeygenResultResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgKeygenResultResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTimeout) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTimeout: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTimeout: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Creator", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Creator = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Round", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Round = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Id", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowTx
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthTx
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthTx
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.Id = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *MsgTimeoutResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowTx
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: MsgTimeoutResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: MsgTimeoutResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipTx(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthTx
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipTx(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowTx
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowTx
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthTx
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupTx
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthTx
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthTx        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowTx          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupTx = fmt.Errorf("proto: unexpected end of group")
)
